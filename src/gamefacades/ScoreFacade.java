package gamefacades;

import adapters.JogoSalvo;
import java.io.BufferedReader;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author Gabriel Schenkel Albino, Cristiano Flores, Julio Vinicius
 */
public class ScoreFacade extends JInternalFrame {

    /**
     * Creates new form ScoreFacadeTeste
     */
    public ScoreFacade() {
        setLocation(40, 15);
        initComponents();
        inserirDadosTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelHistorico = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaHistorico = new javax.swing.JTable();

        setTitle("Histórico de Pontuações");
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelHistorico.setText("Histórico dos jogos salvos:");

        tabelaHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Arquivo", "Score", "Vidas", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelaHistorico.setMinimumSize(new java.awt.Dimension(600, 10));
        tabelaHistorico.setPreferredSize(new java.awt.Dimension(9, 300));
        jScrollPane1.setViewportView(tabelaHistorico);
        if (tabelaHistorico.getColumnModel().getColumnCount() > 0) {
            tabelaHistorico.getColumnModel().getColumn(0).setMinWidth(200);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelHistorico)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelHistorico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelHistorico;
    private javax.swing.JTable tabelaHistorico;
    // End of variables declaration//GEN-END:variables
    
    public void inserirDadosTabela() {
        String diretorio = "game data";
        
        File file = new File(diretorio);
	File afiles[] = file.listFiles();
	int i = 0;
	for(int j = afiles.length; i < j; i++) {
            String extensao = afiles[i].getName().substring(afiles[i].getName().lastIndexOf("."), afiles[i].getName().length());
            if(extensao.equals(".txt")) {
                File arquivo = afiles[i];
                
                try {
                    BufferedReader br = new BufferedReader(new FileReader("game data/" + arquivo.getName()));
                    while(br.ready()){
                        String conteudo = br.readLine();

                        // Validação do arquivo de jogo salvo
                        JogoSalvo jogoInfo = new JogoSalvo();
                        jogoInfo.getConteudoArquivo(conteudo);
                        if(jogoInfo.verificaJogoValido() == true) {
                            DefaultTableModel tabelaModelo = (DefaultTableModel) tabelaHistorico.getModel();
                            
                            Object[] dados = {arquivo.getName(), jogoInfo.getScore(), jogoInfo.getVidas(), jogoInfo.getData()};
                            
                            tabelaModelo.addRow(dados);
                        }
                    }
                    br.close();
                } catch(Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
	}
    }
    
}